{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\r\n * This is only used for tests\r\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = win => {\n  startNativeListeners(win);\n  if (!win.visualViewport) {\n    return;\n  }\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\nconst startNativeListeners = win => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = win => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;\n};\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\nconst keyboardDidResize = win => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\nconst keyboardDidClose = win => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\r\n * Dispatch a keyboard open event\r\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\r\n * Dispatch a keyboard close event\r\n */\nconst fireKeyboardCloseEvent = win => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\nconst trackViewportChanges = win => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\nconst copyVisualViewport = visualViewport => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };","map":{"version":3,"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"sources":["C:/Users/rolan/Desktop/ClienteVeterinaria/node_modules/@ionic/core/dist/esm/keyboard-4d5544a0.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n  previousVisualViewport = {};\r\n  currentVisualViewport = {};\r\n  keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n  startNativeListeners(win);\r\n  if (!win.visualViewport) {\r\n    return;\r\n  }\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n  win.visualViewport.onresize = () => {\r\n    trackViewportChanges(win);\r\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n      setKeyboardOpen(win);\r\n    }\r\n    else if (keyboardDidClose(win)) {\r\n      setKeyboardClose(win);\r\n    }\r\n  };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n  win.addEventListener('keyboardDidShow', (ev) => setKeyboardOpen(win, ev));\r\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n  fireKeyboardOpenEvent(win, ev);\r\n  keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n  fireKeyboardCloseEvent(win);\r\n  keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n  return (!keyboardOpen &&\r\n    previousVisualViewport.width === currentVisualViewport.width &&\r\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n  return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n    detail: { keyboardHeight },\r\n  });\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n  return {\r\n    width: Math.round(visualViewport.width),\r\n    height: Math.round(visualViewport.height),\r\n    offsetTop: visualViewport.offsetTop,\r\n    offsetLeft: visualViewport.offsetLeft,\r\n    pageTop: visualViewport.pageTop,\r\n    pageLeft: visualViewport.pageLeft,\r\n    scale: visualViewport.scale,\r\n  };\r\n};\r\n\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,oBAAoB;AAC9C,MAAMC,kBAAkB,GAAG,oBAAoB;AAC/C,MAAMC,kBAAkB,GAAG,GAAG;AAC9B,IAAIC,sBAAsB,GAAG,CAAC,CAAC;AAC/B,IAAIC,qBAAqB,GAAG,CAAC,CAAC;AAC9B,IAAIC,YAAY,GAAG,KAAK;AACxB;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,MAAM;EAChCH,sBAAsB,GAAG,CAAC,CAAC;EAC3BC,qBAAqB,GAAG,CAAC,CAAC;EAC1BC,YAAY,GAAG,KAAK;AACtB,CAAC;AACD,MAAME,mBAAmB,GAAIC,GAAG,IAAK;EACnCC,oBAAoB,CAACD,GAAG,CAAC;EACzB,IAAI,CAACA,GAAG,CAACE,cAAc,EAAE;IACvB;EACF;EACAN,qBAAqB,GAAGO,kBAAkB,CAACH,GAAG,CAACE,cAAc,CAAC;EAC9DF,GAAG,CAACE,cAAc,CAACE,QAAQ,GAAG,MAAM;IAClCC,oBAAoB,CAACL,GAAG,CAAC;IACzB,IAAIM,eAAe,EAAE,IAAIC,iBAAiB,CAACP,GAAG,CAAC,EAAE;MAC/CQ,eAAe,CAACR,GAAG,CAAC;IACtB,CAAC,MACI,IAAIS,gBAAgB,CAACT,GAAG,CAAC,EAAE;MAC9BU,gBAAgB,CAACV,GAAG,CAAC;IACvB;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAID,GAAG,IAAK;EACpCA,GAAG,CAACW,gBAAgB,CAAC,iBAAiB,EAAGC,EAAE,IAAKJ,eAAe,CAACR,GAAG,EAAEY,EAAE,CAAC,CAAC;EACzEZ,GAAG,CAACW,gBAAgB,CAAC,iBAAiB,EAAE,MAAMD,gBAAgB,CAACV,GAAG,CAAC,CAAC;AACtE,CAAC;AACD,MAAMQ,eAAe,GAAG,CAACR,GAAG,EAAEY,EAAE,KAAK;EACnCC,qBAAqB,CAACb,GAAG,EAAEY,EAAE,CAAC;EAC9Bf,YAAY,GAAG,IAAI;AACrB,CAAC;AACD,MAAMa,gBAAgB,GAAIV,GAAG,IAAK;EAChCc,sBAAsB,CAACd,GAAG,CAAC;EAC3BH,YAAY,GAAG,KAAK;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,eAAe,GAAG,MAAM;EAC5B,MAAMS,sBAAsB,GAAG,CAACpB,sBAAsB,CAACqB,MAAM,GAAGpB,qBAAqB,CAACoB,MAAM,IAAIpB,qBAAqB,CAACqB,KAAK;EAC3H,OAAQ,CAACpB,YAAY,IACnBF,sBAAsB,CAACuB,KAAK,KAAKtB,qBAAqB,CAACsB,KAAK,IAC5DH,sBAAsB,GAAGrB,kBAAkB;AAC/C,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMa,iBAAiB,GAAIP,GAAG,IAAK;EACjC,OAAOH,YAAY,IAAI,CAACY,gBAAgB,CAACT,GAAG,CAAC;AAC/C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,gBAAgB,GAAIT,GAAG,IAAK;EAChC,OAAOH,YAAY,IAAID,qBAAqB,CAACoB,MAAM,KAAKhB,GAAG,CAACmB,WAAW;AACzE,CAAC;AACD;AACA;AACA;AACA,MAAMN,qBAAqB,GAAG,CAACb,GAAG,EAAEoB,QAAQ,KAAK;EAC/C,MAAMC,cAAc,GAAGD,QAAQ,GAAGA,QAAQ,CAACC,cAAc,GAAGrB,GAAG,CAACmB,WAAW,GAAGvB,qBAAqB,CAACoB,MAAM;EAC1G,MAAMJ,EAAE,GAAG,IAAIU,WAAW,CAAC9B,iBAAiB,EAAE;IAC5C+B,MAAM,EAAE;MAAEF;IAAe;EAC3B,CAAC,CAAC;EACFrB,GAAG,CAACwB,aAAa,CAACZ,EAAE,CAAC;AACvB,CAAC;AACD;AACA;AACA;AACA,MAAME,sBAAsB,GAAId,GAAG,IAAK;EACtC,MAAMY,EAAE,GAAG,IAAIU,WAAW,CAAC7B,kBAAkB,CAAC;EAC9CO,GAAG,CAACwB,aAAa,CAACZ,EAAE,CAAC;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMP,oBAAoB,GAAIL,GAAG,IAAK;EACpCL,sBAAsB,GAAG8B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE9B,qBAAqB,CAAC;EACjEA,qBAAqB,GAAGO,kBAAkB,CAACH,GAAG,CAACE,cAAc,CAAC;AAChE,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAID,cAAc,IAAK;EAC7C,OAAO;IACLgB,KAAK,EAAES,IAAI,CAACC,KAAK,CAAC1B,cAAc,CAACgB,KAAK,CAAC;IACvCF,MAAM,EAAEW,IAAI,CAACC,KAAK,CAAC1B,cAAc,CAACc,MAAM,CAAC;IACzCa,SAAS,EAAE3B,cAAc,CAAC2B,SAAS;IACnCC,UAAU,EAAE5B,cAAc,CAAC4B,UAAU;IACrCC,OAAO,EAAE7B,cAAc,CAAC6B,OAAO;IAC/BC,QAAQ,EAAE9B,cAAc,CAAC8B,QAAQ;IACjCf,KAAK,EAAEf,cAAc,CAACe;EACxB,CAAC;AACH,CAAC;AAED,SAASxB,kBAAkB,EAAED,iBAAiB,EAAEW,kBAAkB,EAAEM,gBAAgB,EAAEH,eAAe,EAAEC,iBAAiB,EAAET,mBAAmB,EAAEY,gBAAgB,EAAEF,eAAe,EAAET,mBAAmB,EAAEM,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}