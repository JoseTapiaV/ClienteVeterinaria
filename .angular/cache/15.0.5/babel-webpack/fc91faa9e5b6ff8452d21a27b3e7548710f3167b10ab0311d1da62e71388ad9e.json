{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nconst HapticEngine = {\n  getEngine() {\n    var _a;\n    const win = window;\n    return win.TapticEngine || ((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics;\n  },\n  available() {\n    var _a;\n    const win = window;\n    const engine = this.getEngine();\n    if (!engine) {\n      return false;\n    }\n    /**\r\n     * Developers can manually import the\r\n     * Haptics plugin in their app which will cause\r\n     * getEngine to return the Haptics engine. However,\r\n     * the Haptics engine will throw an error if\r\n     * used in a web browser that does not support\r\n     * the Vibrate API. This check avoids that error\r\n     * if the browser does not support the Vibrate API.\r\n     */\n    if (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.getPlatform()) === 'web') {\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n    return true;\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style\n    });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style\n    });\n  },\n  selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\r\n * Check to see if the Haptic Plugin is available\r\n * @return Returns `true` or false if the plugin is available\r\n */\nconst hapticAvailable = () => {\n  return HapticEngine.available();\n};\n/**\r\n * Trigger a selection changed haptic event. Good for one-time events\r\n * (not for gestures)\r\n */\nconst hapticSelection = () => {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\r\n * Tell the haptic engine that a gesture for a selection change is starting.\r\n */\nconst hapticSelectionStart = () => {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\r\n * Tell the haptic engine that a selection changed during a gesture.\r\n */\nconst hapticSelectionChanged = () => {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\r\n * Tell the haptic engine we are done with a gesture. This needs to be\r\n * called lest resources are not properly recycled.\r\n */\nconst hapticSelectionEnd = () => {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\r\n * Use this to indicate success/failure/warning to the user.\r\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\r\n */\nconst hapticImpact = options => {\n  hapticAvailable() && HapticEngine.impact(options);\n};\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":{"version":3,"names":["HapticEngine","getEngine","_a","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","engine","getPlatform","navigator","vibrate","undefined","isCordova","isCapacitor","impact","options","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticAvailable","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"sources":["C:/Users/rolan/Desktop/ClienteVeterinaria/node_modules/@ionic/core/dist/esm/haptic-029a46f6.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nconst HapticEngine = {\r\n  getEngine() {\r\n    var _a;\r\n    const win = window;\r\n    return win.TapticEngine || (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics);\r\n  },\r\n  available() {\r\n    var _a;\r\n    const win = window;\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return false;\r\n    }\r\n    /**\r\n     * Developers can manually import the\r\n     * Haptics plugin in their app which will cause\r\n     * getEngine to return the Haptics engine. However,\r\n     * the Haptics engine will throw an error if\r\n     * used in a web browser that does not support\r\n     * the Vibrate API. This check avoids that error\r\n     * if the browser does not support the Vibrate API.\r\n     */\r\n    if (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.getPlatform()) === 'web') {\r\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\r\n    }\r\n    return true;\r\n  },\r\n  isCordova() {\r\n    return !!window.TapticEngine;\r\n  },\r\n  isCapacitor() {\r\n    const win = window;\r\n    return !!win.Capacitor;\r\n  },\r\n  impact(options) {\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return;\r\n    }\r\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\r\n    engine.impact({ style });\r\n  },\r\n  notification(options) {\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return;\r\n    }\r\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\r\n    engine.notification({ style });\r\n  },\r\n  selection() {\r\n    this.impact({ style: 'light' });\r\n  },\r\n  selectionStart() {\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return;\r\n    }\r\n    if (this.isCapacitor()) {\r\n      engine.selectionStart();\r\n    }\r\n    else {\r\n      engine.gestureSelectionStart();\r\n    }\r\n  },\r\n  selectionChanged() {\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return;\r\n    }\r\n    if (this.isCapacitor()) {\r\n      engine.selectionChanged();\r\n    }\r\n    else {\r\n      engine.gestureSelectionChanged();\r\n    }\r\n  },\r\n  selectionEnd() {\r\n    const engine = this.getEngine();\r\n    if (!engine) {\r\n      return;\r\n    }\r\n    if (this.isCapacitor()) {\r\n      engine.selectionEnd();\r\n    }\r\n    else {\r\n      engine.gestureSelectionEnd();\r\n    }\r\n  },\r\n};\r\n/**\r\n * Check to see if the Haptic Plugin is available\r\n * @return Returns `true` or false if the plugin is available\r\n */\r\nconst hapticAvailable = () => {\r\n  return HapticEngine.available();\r\n};\r\n/**\r\n * Trigger a selection changed haptic event. Good for one-time events\r\n * (not for gestures)\r\n */\r\nconst hapticSelection = () => {\r\n  hapticAvailable() && HapticEngine.selection();\r\n};\r\n/**\r\n * Tell the haptic engine that a gesture for a selection change is starting.\r\n */\r\nconst hapticSelectionStart = () => {\r\n  hapticAvailable() && HapticEngine.selectionStart();\r\n};\r\n/**\r\n * Tell the haptic engine that a selection changed during a gesture.\r\n */\r\nconst hapticSelectionChanged = () => {\r\n  hapticAvailable() && HapticEngine.selectionChanged();\r\n};\r\n/**\r\n * Tell the haptic engine we are done with a gesture. This needs to be\r\n * called lest resources are not properly recycled.\r\n */\r\nconst hapticSelectionEnd = () => {\r\n  hapticAvailable() && HapticEngine.selectionEnd();\r\n};\r\n/**\r\n * Use this to indicate success/failure/warning to the user.\r\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\r\n */\r\nconst hapticImpact = (options) => {\r\n  hapticAvailable() && HapticEngine.impact(options);\r\n};\r\n\r\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}