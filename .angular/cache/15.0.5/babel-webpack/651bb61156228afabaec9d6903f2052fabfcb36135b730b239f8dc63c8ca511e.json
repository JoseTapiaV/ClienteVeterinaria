{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport { isPlatformServer } from '@angular/common';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport * as i3 from '@angular/fire/app-check';\nimport firebase from 'firebase/compat/app';\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\n    if (!payload.exists) {\n      return {\n        payload,\n        type: 'removed'\n      };\n    }\n    if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n      return {\n        payload,\n        type: 'added'\n      };\n    }\n    return {\n      payload,\n      type: 'modified'\n    };\n  }));\n}\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(payload => ({\n    payload,\n    type: 'query'\n  })));\n}\n\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n */\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\n    const docChanges = action.payload.docChanges();\n    const actions = docChanges.map(change => ({\n      type: change.type,\n      payload: change\n    }));\n    // the metadata has changed from the prior emission\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach((currentDoc, currentIndex) => {\n        const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n        const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n          // document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n    return actions;\n  }));\n}\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n */\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(),\n  // cut down on unneed change cycles\n  map(changes => changes.map(c => ({\n    type: c.type,\n    payload: c\n  }))));\n}\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n */\nfunction combineChanges(current, changes, events) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\r\n * Splice arguments on top of a sliced array, to break top-level ===\r\n * this is useful for change-detection\r\n */\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n/**\r\n * Creates a new sorted array from a new change.\r\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\r\n * and so we have greater control over change detection (by breaking ===)\r\n */\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n/**\r\n * AngularFirestoreCollection service\r\n *\r\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\r\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\r\n * is generic which gives you type safety for data update methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionRef = firebase.firestore.collection('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\r\n *\r\n * // NOTE!: the updates are performed on the reference not the query\r\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\nclass AngularFirestoreCollection {\n  /**\r\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\r\n   * for data operations and data streaming.\r\n   *\r\n   * Note: Data operation methods are done on the reference not the query. This means\r\n   * when you update data it is not updating data to the window of your query unless\r\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\r\n   * on this implication.\r\n   */\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\r\n   * Listen to the latest change in the stream. This method returns changes\r\n   * as they occur and they are not sorted by query order. This allows you to construct\r\n   * your own data structure.\r\n   */\n  stateChanges(events) {\n    let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n    if (events && events.length > 0) {\n      source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\n    }\n    return source.pipe(\n    // We want to filter out empty arrays, but always emit at first, so the developer knows\n    // that the collection has been resolve; even if it's empty\n    startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n   * but it collects each event in an array over time.\r\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\r\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n   * query order.\r\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign(Object.assign({}, a.data()), {\n          [options.idField]: a.id\n        });\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Retrieve the results of the query once.\r\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n  /**\r\n   * Add data to a collection reference.\r\n   *\r\n   * Note: Data operation methods are done on the reference not the query. This means\r\n   * when you update data it is not updating data to the window of your query unless\r\n   * the data fits the criteria of the query.\r\n   */\n  add(data) {\n    return this.ref.add(data);\n  }\n  /**\r\n   * Create a reference to a single document in a collection.\r\n   */\n  doc(path) {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n}\n\n/**\r\n * AngularFirestoreDocument service\r\n *\r\n * This class creates a reference to a Firestore Document. A reference is provided in\r\n * in the constructor. The class is generic which gives you type safety for data update\r\n * methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\r\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\r\n * fakeStock.valueChanges().map(snap => {\r\n *   if(snap.exists) return snap.data();\r\n *   return null;\r\n * }).subscribe(value => console.log(value));\r\n * // OR! Transform using Observable.from() and the data is unwrapped for you\r\n * Observable.from(fakeStock).subscribe(value => console.log(value));\r\n */\nclass AngularFirestoreDocument {\n  /**\r\n   * The constructor takes in a DocumentReference to provide wrapper methods\r\n   * for data operations, data streaming, and Symbol.observable.\r\n   */\n  constructor(ref, afs) {\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\r\n   * Create or overwrite a single document.\r\n   */\n  set(data, options) {\n    return this.ref.set(data, options);\n  }\n  /**\r\n   * Update some fields of a document without overwriting the entire document.\r\n   */\n  update(data) {\n    return this.ref.update(data);\n  }\n  /**\r\n   * Delete a document.\r\n   */\n  delete() {\n    return this.ref.delete();\n  }\n  /**\r\n   * Create a reference to a sub-collection given a path and an optional query\r\n   * function.\r\n   */\n  collection(path, queryFn) {\n    const collectionRef = this.ref.collection(path);\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n  /**\r\n   * Listen to snapshot updates from the document.\r\n   */\n  snapshotChanges() {\n    const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    return this.snapshotChanges().pipe(map(({\n      payload\n    }) => options.idField ? Object.assign(Object.assign({}, payload.data()), {\n      [options.idField]: payload.id\n    }) : payload.data()));\n  }\n  /**\r\n   * Retrieve the document once.\r\n   */\n  get(options) {\n    return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\n  }\n}\n\n/**\r\n * AngularFirestoreCollectionGroup service\r\n *\r\n * This class holds a reference to a Firestore Collection Group Query.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\nclass AngularFirestoreCollectionGroup {\n  /**\r\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\r\n   * for data operations and data streaming.\r\n   */\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\r\n   * Listen to the latest change in the stream. This method returns changes\r\n   * as they occur and they are not sorted by query order. This allows you to construct\r\n   * your own data structure.\r\n   */\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\n    }\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n   * but it collects each event in an array over time.\r\n   */\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\r\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n   * query order.\r\n   */\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n  valueChanges(options = {}) {\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign({\n          [options.idField]: a.id\n        }, a.data());\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Retrieve the results of the query once.\r\n   */\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n}\n\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n */\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param collectionRef - A collection reference to query\r\n * @param queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n */\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return {\n    query,\n    ref\n  };\n}\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable';\r\n *\r\n * @Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\nclass AngularFirestore {\n  /**\r\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n   * don't rely on the main Firebase App instance and we can create named\r\n   * apps and use multiple apps.\r\n   */\n  constructor(options, name, shouldEnablePersistence, settings,\n  // tslint:disable-next-line:ban-types\n  platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    this.schedulers = schedulers;\n    const app = ɵfirebaseAppFactory(options, zone, name);\n    const useEmulator = _useEmulator;\n    if (auth) {\n      ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n    }\n    [this.firestore, this.persistenceEnabled$] = ɵcacheInstance(`${app.name}.firestore`, 'AngularFirestore', app.name, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n      if (settings) {\n        firestore.settings(settings);\n      }\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.warn(e);\n            }\n            return of(false);\n          }\n        };\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n  collection(pathOrRef, queryFn) {\n    let collectionRef;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection(refInZone, query, this);\n  }\n  /**\r\n   * Create a reference to a Firestore Collection Group based on a collectionId\r\n   * and an optional query function to narrow the result\r\n   * set.\r\n   */\n  collectionGroup(collectionId, queryGroupFn) {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup = this.firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n  }\n  doc(pathOrRef) {\n    let ref;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument(refInZone, this);\n  }\n  /**\r\n   * Returns a generated Firestore Document Id.\r\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n}\nAngularFirestore.ɵfac = function AngularFirestore_Factory(t) {\n  return new (t || AngularFirestore)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS$1, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n};\nAngularFirestore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFirestore,\n  factory: AngularFirestore.ɵfac,\n  providedIn: 'any'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestore, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENABLE_PERSISTENCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ɵAngularFireSchedulers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE_SETTINGS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: i2.AngularFireAuth,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR$1]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS$1]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TENANT_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LANGUAGE_CODE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_DEVICE_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE]\n      }]\n    }, {\n      type: i3.AppCheckInstances,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nclass AngularFirestoreModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\n  }\n  /**\r\n   * Attempt to enable persistent storage, if possible\r\n   */\n  static enablePersistence(persistenceSettings) {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [{\n        provide: ENABLE_PERSISTENCE,\n        useValue: true\n      }, {\n        provide: PERSISTENCE_SETTINGS,\n        useValue: persistenceSettings\n      }]\n    };\n  }\n}\nAngularFirestoreModule.ɵfac = function AngularFirestoreModule_Factory(t) {\n  return new (t || AngularFirestoreModule)();\n};\nAngularFirestoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFirestoreModule\n});\nAngularFirestoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFirestore]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFirestore]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };","map":{"version":3,"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","NgModule","asyncScheduler","Observable","from","of","i1","keepUnstableUntilFirst","VERSION","startWith","pairwise","map","scan","distinctUntilChanged","filter","ɵfirebaseAppFactory","ɵcacheInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","isPlatformServer","i2","ɵauthFactory","USE_EMULATOR","USE_EMULATOR$1","SETTINGS","SETTINGS$1","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","i3","firebase","_fromRef","ref","scheduler","subscriber","unsubscribe","schedule","onSnapshot","includeMetadataChanges","fromRef","fromDocRef","pipe","undefined","priorPayload","payload","exists","type","fromCollectionRef","docChanges","query","priorAction","action","actions","change","JSON","stringify","metadata","docs","forEach","currentDoc","currentIndex","docChange","find","d","doc","isEqual","priorDoc","push","oldIndex","newIndex","sortedChanges","events","current","changes","combineChanges","it","c","indexOf","combineChange","sliceAndSplice","original","start","deleteCount","args","returnArray","slice","splice","combined","copiedArray","validateEventsArray","length","AngularFirestoreCollection","constructor","afs","stateChanges","source","schedulers","outsideAngular","prior","auditTrail","snapshotChanges","validatedEvents","scheduledSortedChanges$","valueChanges","options","a","idField","Object","assign","data","id","get","add","path","AngularFirestoreDocument","set","update","delete","collection","queryFn","collectionRef","associateQuery","scheduledFromDocRef$","AngularFirestoreCollectionGroup","fromCollectionRefScheduled$","ENABLE_PERSISTENCE","PERSISTENCE_SETTINGS","AngularFirestore","name","shouldEnablePersistence","settings","platformId","zone","persistenceSettings","_useEmulator","auth","useAuthEmulator","authSettings","tenantId","languageCode","useDeviceLanguage","persistence","_appCheckInstances","app","useEmulator","firestore","persistenceEnabled$","runOutsideAngular","enablePersistence","then","e","console","warn","pathOrRef","refInZone","ngZone","run","collectionGroup","collectionId","queryGroupFn","createId","ɵfac","NgZone","ɵAngularFireSchedulers","AngularFireAuth","AppCheckInstances","ɵprov","providedIn","decorators","AngularFirestoreModule","registerVersion","full","ngModule","providers","provide","useValue","ɵmod","ɵinj"],"sources":["C:/Users/rolan/Desktop/ClienteVeterinaria/node_modules/@angular/fire/fesm2015/angular-fire-compat-firestore.js"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\r\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\r\nimport * as i1 from '@angular/fire';\r\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\r\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\r\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport * as i2 from '@angular/fire/compat/auth';\r\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\r\nimport * as i3 from '@angular/fire/app-check';\r\nimport firebase from 'firebase/compat/app';\r\n\r\nfunction _fromRef(ref, scheduler = asyncScheduler) {\r\n    return new Observable(subscriber => {\r\n        let unsubscribe;\r\n        if (scheduler != null) {\r\n            scheduler.schedule(() => {\r\n                unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\r\n            });\r\n        }\r\n        else {\r\n            unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\r\n        }\r\n        return () => {\r\n            if (unsubscribe != null) {\r\n                unsubscribe();\r\n            }\r\n        };\r\n    });\r\n}\r\nfunction fromRef(ref, scheduler) {\r\n    return _fromRef(ref, scheduler);\r\n}\r\nfunction fromDocRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler)\r\n        .pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\r\n        if (!payload.exists) {\r\n            return { payload, type: 'removed' };\r\n        }\r\n        if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\r\n            return { payload, type: 'added' };\r\n        }\r\n        return { payload, type: 'modified' };\r\n    }));\r\n}\r\nfunction fromCollectionRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\r\n}\r\n\r\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n */\r\nfunction docChanges(query, scheduler) {\r\n    return fromCollectionRef(query, scheduler)\r\n        .pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\r\n        const docChanges = action.payload.docChanges();\r\n        const actions = docChanges.map(change => ({ type: change.type, payload: change }));\r\n        // the metadata has changed from the prior emission\r\n        if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\r\n            // go through all the docs in payload and figure out which ones changed\r\n            action.payload.docs.forEach((currentDoc, currentIndex) => {\r\n                const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\r\n                const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\r\n                if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) ||\r\n                    !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\r\n                    // document doesn't appear to have changed, don't log another action\r\n                }\r\n                else {\r\n                    // since the actions are processed in order just push onto the array\r\n                    actions.push({\r\n                        type: 'modified',\r\n                        payload: {\r\n                            oldIndex: currentIndex,\r\n                            newIndex: currentIndex,\r\n                            type: 'modified',\r\n                            doc: currentDoc\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return actions;\r\n    }));\r\n}\r\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n */\r\nfunction sortedChanges(query, events, scheduler) {\r\n    return docChanges(query, scheduler)\r\n        .pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(), // cut down on unneed change cycles\r\n    map(changes => changes.map(c => ({ type: c.type, payload: c }))));\r\n}\r\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n */\r\nfunction combineChanges(current, changes, events) {\r\n    changes.forEach(change => {\r\n        // skip unwanted change types\r\n        if (events.indexOf(change.type) > -1) {\r\n            current = combineChange(current, change);\r\n        }\r\n    });\r\n    return current;\r\n}\r\n/**\r\n * Splice arguments on top of a sliced array, to break top-level ===\r\n * this is useful for change-detection\r\n */\r\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\r\n    const returnArray = original.slice();\r\n    returnArray.splice(start, deleteCount, ...args);\r\n    return returnArray;\r\n}\r\n/**\r\n * Creates a new sorted array from a new change.\r\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\r\n * and so we have greater control over change detection (by breaking ===)\r\n */\r\nfunction combineChange(combined, change) {\r\n    switch (change.type) {\r\n        case 'added':\r\n            if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // Not sure why the duplicates are getting fired\r\n            }\r\n            else {\r\n                return sliceAndSplice(combined, change.newIndex, 0, change);\r\n            }\r\n            break;\r\n        case 'modified':\r\n            if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // When an item changes position we first remove it\r\n                // and then add it's new position\r\n                if (change.oldIndex !== change.newIndex) {\r\n                    const copiedArray = combined.slice();\r\n                    copiedArray.splice(change.oldIndex, 1);\r\n                    copiedArray.splice(change.newIndex, 0, change);\r\n                    return copiedArray;\r\n                }\r\n                else {\r\n                    return sliceAndSplice(combined, change.newIndex, 1, change);\r\n                }\r\n            }\r\n            break;\r\n        case 'removed':\r\n            if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                return sliceAndSplice(combined, change.oldIndex, 1);\r\n            }\r\n            break;\r\n    }\r\n    return combined;\r\n}\r\n\r\nfunction validateEventsArray(events) {\r\n    if (!events || events.length === 0) {\r\n        events = ['added', 'removed', 'modified'];\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * AngularFirestoreCollection service\r\n *\r\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\r\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\r\n * is generic which gives you type safety for data update methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionRef = firebase.firestore.collection('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\r\n *\r\n * // NOTE!: the updates are performed on the reference not the query\r\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreCollection {\r\n    /**\r\n     * The constructor takes in a CollectionReference and Query to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query. See the AssociatedRefence type for details\r\n     * on this implication.\r\n     */\r\n    constructor(ref, query, afs) {\r\n        this.ref = ref;\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     */\r\n    stateChanges(events) {\r\n        let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\r\n        if (events && events.length > 0) {\r\n            source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\r\n        }\r\n        return source.pipe(\r\n        // We want to filter out empty arrays, but always emit at first, so the developer knows\r\n        // that the collection has been resolve; even if it's empty\r\n        startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     */\r\n    snapshotChanges(events) {\r\n        const validatedEvents = validateEventsArray(events);\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map(actions => actions.payload.docs.map(a => {\r\n            if (options.idField) {\r\n                return Object.assign(Object.assign({}, a.data()), { [options.idField]: a.id });\r\n            }\r\n            else {\r\n                return a.data();\r\n            }\r\n        })), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Add data to a collection reference.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query.\r\n     */\r\n    add(data) {\r\n        return this.ref.add(data);\r\n    }\r\n    /**\r\n     * Create a reference to a single document in a collection.\r\n     */\r\n    doc(path) {\r\n        // TODO is there a better way to solve this type issue\r\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\r\n    }\r\n}\r\n\r\n/**\r\n * AngularFirestoreDocument service\r\n *\r\n * This class creates a reference to a Firestore Document. A reference is provided in\r\n * in the constructor. The class is generic which gives you type safety for data update\r\n * methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\r\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\r\n * fakeStock.valueChanges().map(snap => {\r\n *   if(snap.exists) return snap.data();\r\n *   return null;\r\n * }).subscribe(value => console.log(value));\r\n * // OR! Transform using Observable.from() and the data is unwrapped for you\r\n * Observable.from(fakeStock).subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreDocument {\r\n    /**\r\n     * The constructor takes in a DocumentReference to provide wrapper methods\r\n     * for data operations, data streaming, and Symbol.observable.\r\n     */\r\n    constructor(ref, afs) {\r\n        this.ref = ref;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Create or overwrite a single document.\r\n     */\r\n    set(data, options) {\r\n        return this.ref.set(data, options);\r\n    }\r\n    /**\r\n     * Update some fields of a document without overwriting the entire document.\r\n     */\r\n    update(data) {\r\n        return this.ref.update(data);\r\n    }\r\n    /**\r\n     * Delete a document.\r\n     */\r\n    delete() {\r\n        return this.ref.delete();\r\n    }\r\n    /**\r\n     * Create a reference to a sub-collection given a path and an optional query\r\n     * function.\r\n     */\r\n    collection(path, queryFn) {\r\n        const collectionRef = this.ref.collection(path);\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        return new AngularFirestoreCollection(ref, query, this.afs);\r\n    }\r\n    /**\r\n     * Listen to snapshot updates from the document.\r\n     */\r\n    snapshotChanges() {\r\n        const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\r\n        return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        return this.snapshotChanges().pipe(map(({ payload }) => options.idField ? Object.assign(Object.assign({}, payload.data()), { [options.idField]: payload.id }) : payload.data()));\r\n    }\r\n    /**\r\n     * Retrieve the document once.\r\n     */\r\n    get(options) {\r\n        return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n}\r\n\r\n/**\r\n * AngularFirestoreCollectionGroup service\r\n *\r\n * This class holds a reference to a Firestore Collection Group Query.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreCollectionGroup {\r\n    /**\r\n     * The constructor takes in a CollectionGroupQuery to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     */\r\n    constructor(query, afs) {\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     */\r\n    stateChanges(events) {\r\n        if (!events || events.length === 0) {\r\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\r\n        }\r\n        return docChanges(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     */\r\n    snapshotChanges(events) {\r\n        const validatedEvents = validateEventsArray(events);\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\r\n        return fromCollectionRefScheduled$\r\n            .pipe(map(actions => actions.payload.docs.map(a => {\r\n            if (options.idField) {\r\n                return Object.assign({ [options.idField]: a.id }, a.data());\r\n            }\r\n            else {\r\n                return a.data();\r\n            }\r\n        })), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n}\r\n\r\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n */\r\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\r\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\r\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\r\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\r\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param collectionRef - A collection reference to query\r\n * @param queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n */\r\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\r\n    const query = queryFn(collectionRef);\r\n    const ref = collectionRef;\r\n    return { query, ref };\r\n}\r\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable';\r\n *\r\n * @Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\r\nclass AngularFirestore {\r\n    /**\r\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n     * don't rely on the main Firebase App instance and we can create named\r\n     * apps and use multiple apps.\r\n     */\r\n    constructor(options, name, shouldEnablePersistence, settings, \r\n    // tslint:disable-next-line:ban-types\r\n    platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\r\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\r\n        this.schedulers = schedulers;\r\n        const app = ɵfirebaseAppFactory(options, zone, name);\r\n        const useEmulator = _useEmulator;\r\n        if (auth) {\r\n            ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\r\n        }\r\n        [this.firestore, this.persistenceEnabled$] = ɵcacheInstance(`${app.name}.firestore`, 'AngularFirestore', app.name, () => {\r\n            const firestore = zone.runOutsideAngular(() => app.firestore());\r\n            if (settings) {\r\n                firestore.settings(settings);\r\n            }\r\n            if (useEmulator) {\r\n                firestore.useEmulator(...useEmulator);\r\n            }\r\n            if (shouldEnablePersistence && !isPlatformServer(platformId)) {\r\n                // We need to try/catch here because not all enablePersistence() failures are caught\r\n                // https://github.com/firebase/firebase-js-sdk/issues/608\r\n                const enablePersistence = () => {\r\n                    try {\r\n                        return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\r\n                    }\r\n                    catch (e) {\r\n                        if (typeof console !== 'undefined') {\r\n                            console.warn(e);\r\n                        }\r\n                        return of(false);\r\n                    }\r\n                };\r\n                return [firestore, zone.runOutsideAngular(enablePersistence)];\r\n            }\r\n            else {\r\n                return [firestore, of(false)];\r\n            }\r\n        }, [settings, useEmulator, shouldEnablePersistence]);\r\n    }\r\n    collection(pathOrRef, queryFn) {\r\n        let collectionRef;\r\n        if (typeof pathOrRef === 'string') {\r\n            collectionRef = this.firestore.collection(pathOrRef);\r\n        }\r\n        else {\r\n            collectionRef = pathOrRef;\r\n        }\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        const refInZone = this.schedulers.ngZone.run(() => ref);\r\n        return new AngularFirestoreCollection(refInZone, query, this);\r\n    }\r\n    /**\r\n     * Create a reference to a Firestore Collection Group based on a collectionId\r\n     * and an optional query function to narrow the result\r\n     * set.\r\n     */\r\n    collectionGroup(collectionId, queryGroupFn) {\r\n        const queryFn = queryGroupFn || (ref => ref);\r\n        const collectionGroup = this.firestore.collectionGroup(collectionId);\r\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\r\n    }\r\n    doc(pathOrRef) {\r\n        let ref;\r\n        if (typeof pathOrRef === 'string') {\r\n            ref = this.firestore.doc(pathOrRef);\r\n        }\r\n        else {\r\n            ref = pathOrRef;\r\n        }\r\n        const refInZone = this.schedulers.ngZone.run(() => ref);\r\n        return new AngularFirestoreDocument(refInZone, this);\r\n    }\r\n    /**\r\n     * Returns a generated Firestore Document Id.\r\n     */\r\n    createId() {\r\n        return this.firestore.collection('_').doc().id;\r\n    }\r\n}\r\nAngularFirestore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: ENABLE_PERSISTENCE, optional: true }, { token: SETTINGS, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: PERSISTENCE_SETTINGS, optional: true }, { token: USE_EMULATOR, optional: true }, { token: i2.AngularFireAuth, optional: true }, { token: USE_EMULATOR$1, optional: true }, { token: SETTINGS$1, optional: true }, { token: TENANT_ID, optional: true }, { token: LANGUAGE_CODE, optional: true }, { token: USE_DEVICE_LANGUAGE, optional: true }, { token: PERSISTENCE, optional: true }, { token: i3.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nAngularFirestore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, providedIn: 'any' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'any'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [FIREBASE_OPTIONS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [FIREBASE_APP_NAME]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [ENABLE_PERSISTENCE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SETTINGS]\r\n                }] }, { type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [PERSISTENCE_SETTINGS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR]\r\n                }] }, { type: i2.AngularFireAuth, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR$1]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SETTINGS$1]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [TENANT_ID]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [LANGUAGE_CODE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_DEVICE_LANGUAGE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [PERSISTENCE]\r\n                }] }, { type: i3.AppCheckInstances, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\r\n\r\nclass AngularFirestoreModule {\r\n    constructor() {\r\n        firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\r\n    }\r\n    /**\r\n     * Attempt to enable persistent storage, if possible\r\n     */\r\n    static enablePersistence(persistenceSettings) {\r\n        return {\r\n            ngModule: AngularFirestoreModule,\r\n            providers: [\r\n                { provide: ENABLE_PERSISTENCE, useValue: true },\r\n                { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularFirestoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nAngularFirestoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule });\r\nAngularFirestoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, providers: [AngularFirestore] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [AngularFirestore]\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}